 Title:  Writeup for Project 2, Fall 2015
 Date:  10/18/15
 Group:	27
 Name					Email	
 Allen Almasi				asalmasi@usc.edu
 Victoria Dea				vdea@usc.edu
 Gabriel Mel de Fontenay		meldefon@usc.edu
 

I. Requirements:
	+ Part 1
		This part requires us to implement the system calls Acquire and Release for the Lock class as well as Wait, Signal, and Broadcast for the Condition class. In addition we have to implement the constructor and destructor system calls CreateLock, DestroyLock, CreateCondition and DestroyCondition. The system calls have to be protected from user program errors so user programs cannot crash the OS. For example, CreateLock and CreateCondition has to return an interger value so the user does not handle the kernel space pointer directly. Finally, we have to create a test suite to prove that these system calls work and do not crash Nachos when used correctly and incorrectly. 

	+ Part 2
		This part requires us to implement the Exec and Fork system calls to allow for multiprogramming in Nachos. We are also required to create a test suite to prove that these system calls work and do not crash Nachos when used correctly and incorrectly.

	+ Part 3
		This part requires us to recreate the Passport Office from project 1, part 2 as a set of multithreaded Nachos user programs, using the system calls created during this project. We are also required to create a test suite to prove that the implementation works correctly. 

-Describe what's your understanding of the requirements from the assignment statement. With the requirement analysis, you would be clear about what you are supposed to do.

II. Assumptions:
	For our assumptions, we assumed that:


III. Design:
	+ Part 1

	+ Part 2

	+ Part 3	

- This section is to cover your logic and ideas as to how  you are going to solve the problem presented.  This should include a description of classes, algorithms, etc. This is not code. You must document ALL parts of a project.

IV. Implementation:
	+ Part 1
		+ Files Modified
			userprog/exception.cc
			userprog/syscall.h
			test/start.s
			threads/system.cc
			threads/system.h
			userprog/Makefile

		+ Files added
			threads/structs.h
			test/testpart1.c

		+ Data Structures added, and the file they were added to.
			//In file structs.h:
				struct KernelLock {}
				struct KernelCondition {}
                struct ProcessEntry {}

		+ Data Structures modified, and the file they were added to.
			-For example,
				class Lock		-- in file threads.cc/threads.h
				{
					//. Modified fields.
				}
                class AddressSpace{
                    //Added in a stacak bitMap to allocate free stacks for newly forked threads
                    //Added in a process ID to keep track of the process that owns an address space
                }
                

		+ Functions added and in which file.
			//In file exception.cc:
				Acquire_Syscall(int id);
				Release_Syscall(int id);
				Wait_Syscall(int id);
				Signal_Syscall(int id);
				Broadcast_Syscall(int id);
				CreateLock_Syscall();
				DestroyLock_Syscall(int id);
				CreateCondition_Syscall();
				DestroyCondition_Syscall(int id);

			//In file syscall.h:
				CreateLock();
				DestroyLock(int id);
				Acquire(int id);
				Release(int id);
				CreateCondition();
				DestroyCondition(int id);
				Signal(int id);
				Wait(int id);
				Broadcast(int id);

			//In file testpart1.c
				LockTest();
				ConditionTest();
				AcquireAndReleaseTest();
				WaitSignalBroadcastTest();

		+ Functions modified and in which file.
			//In file exception.cc:
				ExceptionHandler(ExceptionType which);


	+ Part 2
		+ Files Modified
			userprog/syscall.h
			userprog/exception.cc
            userprog/addrspace.h
            userprog/addrspace.cc
            userprog/progtest.cc
            threads/thread
            threads/system.h
            threads/system.cc
            machine/machine.h
            test/testfiles.c
            test/matmult.c
            test/sort
		+ Files added
            No files added, only modified
		+ Data Structures added, and the file they were added to.
            Only created one new structure - the processEntry structure for the process table
            //In structs.h
            ProcessEntry{
                int pID
                int numThreads
                bool running
            }
                
		+ Data Structures modified, and the file they were added to.
			class Thread{
                //Added in a base stack address int for delete upon exit
            }
            class AddrSpace{
                //Added in a stack bit map to help with stack allocation
                //Added numNonStackPages to help with stack address computation
                //Added a stack bit map lock to protect clears and finds
                //Added in a process ID int to keep track of a process index

                //Added in a new method with, in a threadsafe way, finds a new 
                //stack space for a forked thread. Uses the bit map lock
            }

		+ Functions added and in which file.
		+ Functions modified and in which file.

	+ Part 3
		+ Files Modified
		+ Files added

		+ Data Structures added, and the file they were added to.
		+ Data Structures modified, and the file they were added to.
			-For example,
				class Lock		-- in file threads.cc/threads.h
				{
					//. Modified fields.
				}

		+ Functions added and in which file.
		+ Functions modified and in which file.
	

V. Testing:  (For each test case, you must show)
	+ Part 1
		+ How to test
			To run tests for part 1, compile in the /test/ directory, then go to the /userprog/ directory and type the command "nachos -x ../test/testpart1"

		+ Test Output
			The structure of the output for each section of the test begins with a title, specifying which system calls are being tested. Each test case output begins with "Test: " followed by a short description of what is being tested. There may be some intermediate print statements from the kernel and the last line for one case should end with "Result: " followed by "Success". If any of the test cases failed, the result will say "Fail".
	
	+ Part 2
		+ How to test
			To run tests for part 2, compile in the /test/ directory, then go to the /userprog/ directory and type the command "nachos -x ../test/testpart2"
	
		+ Test Output
	
	
	+ Part 3
		+ How to test
			To run tests for part 3, compile in the /test/ directory, then go to the /userprog/ directory and type the command "nachos -x ../test/testpart3"

	- How to run the test cases, the commands, the arguments and so on.
		+ Test Output
	- Describe the testing output. You don't have to dump all the output info. Just make sure your description can exactly reflect your output. The grader of your submission will be wanting to compare the output they get with what you say the output is.

VI. Discussion:
	+ Experiment expectation.  (What is supposed to happen.)
	+ Experiment result.  (What actually happened.)
	+ Explanation
		- Explain your experiment result - how it proves what 
		  you were supposed to prove.

VIII. Miscellaneous:
- Whatever else you want the grader know about your development.  You can create your own subsections headings here.









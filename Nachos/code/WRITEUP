 Title:  Writeup for Project 4, Fall 2015
 Date:  12/3/15
 Group:	27
 Name					Email	
 Allen Almasi				asalmasi@usc.edu
 Victoria Dea				vdea@usc.edu
 Gabriel Mel de Fontenay		meldefon@usc.edu
 

I. Requirements:
	+ Part 1:
		This part requires us to implement all of the entities from the Passport Office simulation so they can work together across Nachos clients. There is going to be only one server whose job is to connect all of the entities together using remote procedure calls. Each of the entities are going to be called using the Exec system call instead of the Fork system call. 

	+ Part 2:
		This part requires us to now use more than one server to run the Passport Office simulation. Any server can get a request from any client but a server will only have the lock, CV or MV that it creates. Therefore no one server will have all of the locks, CVs or MVs. If a server gets a request and the object is not in their table, it could have been created by another server. At this point the server should send a message to the other servers to see if they created the object. 

II. Assumptions: - Reasonable assumptions you take for your scheme.
	+ Part 1:
		-We could use the CreateMV, CreateLock, and CreateCondition function to search for existing locks, CVs, or MVs
		-Instead of using names to make remote calls, we could provide the user with integer values that are unique (machineID * 100 + index) to specific servers to avoid checking via strings
		-We could Exec everything within in a file instead of manually Execing everything through the command line
		-We could use the same machineID but different mailbox numbers to act as different clients	
	+ Part 2:
		-We could create as many cases as possible for handling server replies and requests
		-We would use a data structure to hold our server requests
		-We could use whatever message formatting that we liked
		-Part 2 would be coded to work with an infinite number of servers
III. Design:
	+ Part 1
		To complete part 1, we first had to separate functions and variables specific to each clerk and each type of customer (normal or senator) into their own individual files with their own main function which would execute their behavior. After separating all the clerks and customers into their own files, we then needed to figure out how we would share the global data with the other files; we had previously shared data using includes and extern variables. To share data, we moved all the global data, which was previously declared only in one file, into each individual file and declared them as local data; we did this to avoid having to heavily modify any code since the variable names would all be the same. To initialize the local data, we used two server functions in each file: CreateServerMVs(), which would create all the primitive data types on the server that would need to be shared via the server between clients; Initialize(), which would create all the data on the server needed for the clerk struct, Monitor. With these two functions in each file, we would pass in all the variables that would be shared on the server and had the function return the correct values by grabbing or generating them from the server. Having taken care of both these things, our final task was to create a file that would allow the user to enter the number of clerks and customers to start the simulation; this was done in threadtest.c which takes in the number of clerks and customers, creates all the global data that is needed on the server using CreateServerMVs() and Initialize(), then Execs each individual clerk and customer.  
	+ Part 2
		In this part, we first had to think about how we would go about handling server to server communication since there is going to be multiple servers. Eventually, we decided that this would be the general flow of server to server communciation: Client contacts Server 1, Server 1 is unable to fulfill request, Server 1 creates a ServerRequest x on behalf of Client, ServerRequest x is sent to all other servers, Server 2 receives ServerRequest x, Server 2 processes ServerRequest x, Server 2 sends reply to Server 1 for ServerRequest x, Server 1 handles reply from Server 2 for ServerRequest x. Once we decided on the flow of the program, we then proceeded to add two new sets of cases: SC_Server_x, which would be used to handle a server receiving a server request from another server, so in the case above Server 2 would handle the request in SC_Server_x from Server 1; SC_ServerReply_x, which would be used to handle the replies received by the server from other servers that are running in SC_Server_x, so in our case above Server 1 would handle its replies in SC_ServerReply_x from Server 2. After the cases were created, we then decided to create a new struct called ServerRequest which would hold all the data necessary to handle a pending request. So once a client sends the server a message and the server cannot handle its request, the server creates a new ServerRequest object, stores all the data received from the client in the ServerRequest object, then sends whatever data is necessary from the ServerRequest object to all other servers. To hold the struct, we placed it in a vector since we must continually add ServerRequest objects as requests are created.   

IV. Implementation:
	+ Part 1
		+ Files Modified
			test/customer.c
			test/globalVars.h
			test/Makefile
			test/monitor.h
			test/threadtest.c
			threads/threadtest.cc
			userprog/exception.cc
			userprog/syscall.h

		+ Files added
			test/appClerk.c
			test/cashier.c
			test/manager.c
			test/picClerk.c
			test/passPClerk.c
			test/setup.c
			test/setup.h

		+ Data Structures added, and the file they were added to.
			customer.c, threadtest.c, appClerk.c, cashier.c, passPClerk.c, and picClerk.c have the following structs
				Monitor
				appClerk
				picClerk
				passPClerk
				cashier

		+ Functions added and in which file.
			appClerk.c, cashier.c, passPClerk.c, and picClerk.c each have:
				createServerMVs()
				initialize()
				Uprintf()
				waitForLine()
				main()
			customer.c
				createServerMVs()
				initialize()
				Uprintf()
				main()
			manager.c
				createServerMVs()
				initialize()
				Uprintf()
				checkForClerkOnBreak()
				main()
			threadtest.c
				createServerMVs()
				initialize()
				Uprintf()
			setup.c
				createServerMVs()
				initialize()


		+ Functions modified and in which file.
			customer.c
				punish()
				tellPassportClerkSSN()
				tellCashierSSN()
				payCashier()
				getInLine()
				doAppClerkStuff()
				doPicClerkStuff()
				doPassportClerkStuff()
				doCashierStuff()
				customer()
			threadtest.c
				main()
			threadtest.cc
				Server()
			exception.cc
				sendAndRecieveSyscallMessage()


	+ Part 2
		+ Files Modified
			threads/serverStructs.h
			threads/system.cc
			threads/system.h
			threads/threadtest.cc
			userprog/syscall.h

		+ Files added

		+ Data Structures added, and the file they were added to.
			serverStructs.h
				ServerRequest{}
			threadtest.cc
				Vector<ServerRequest*> *serverRVs;

		+ Data Structures modified, and the file they were added to.
			No existing data structures were modified

		+ Functions added and in which file.
			threadtest.cc
				NewServerRequest()
				sendReplyToServer()
				sendReplyToClient()
				checkIfEnter()

		+ Functions modified and in which file.
			system.cc
				Initialize()
			threadtest.cc
				Server()

V. Testing:  (For each test case, you must show)
	+ Part 1 and 2
		+ How to test

		+ Test Output

		+ Test Output


VI. Discussion:
	+ Experiment expectation.  (What is supposed to happen.)
	+ Experiment result.  (What actually happened.)
	+ Explanation
